#pragma once
#include <Siv3D.hpp>//Siv3Dのライブラリ
//-----------------------------------------------------------------------------
// プログラム名：TaskManagement
// 作　成　者：長谷川勇一朗
// 作成年月日：2023/3/11作成開始
// 機　　　能：タスク管理クラスの宣言
//
// タスク管理クラスでは
// ・タイトル
// ・概要
// ・優先度
// ・進捗状況
// ・開始日
// ・期限日
// ・担当者
//-----------------------------------------------------------------------------

//列挙型定義
enum class Priority {//タスクの優先度
    Low,        //低
    Medium,     //中
    High        //高
};

enum class Situation {//タスクの進捗状況
	NotStarted,		//未開始
	Running,		//実行中
	Completion,		//完了
	Postponement,	//延期
	Waiting,		//待機中
};

//タスク管理型
class TaskManagement
{
private:    //以下のメンバには直接アクセスできない
	String title;        //タイトル
	String description;  //概要
	Priority priority;   //タスクの優先度
	Situation situation; //タスクの状況
	Date createDate;     //作成日
	Date deadline;       //締め切り日
	String manager;      //担当者

public:        //以下のメンバにはアクセスが可能

	//コンストラクタ 宣言の形式は次の通り. クラス名 変数名 ( 実引数の並び );

	TaskManagement();    //デフォルトコンストラクタ（初期子を与えなくても確実な初期化ができる）

	//-------------------------------------------------------------------------
	// title_       :タスクのタイトル
	// description_ :タスクの概要
	// priority_    :タスクの優先度
	// situation_   :タスクの状況
	// createDate_  :作成日
	// deadline_    :締め切り日
	// manager_     :担当者
	//-------------------------------------------------------------------------
	TaskManagement(
		String title_,
		String description_,
		Priority priority_ = Priority::Medium,
		Situation situation_ = Situation::NotStarted,
		Date createDate_ = Date::Today(),
		Date deadline_ = Date::Tomorrow(),
		String manager_ = U"unknown");

	//デストラクタ＜オブジェクトの生存期間が終了時に行う処理＞
	//~TaskManagement();

	//<学習説明欄>
	//関数宣言の後にconstをつけると、この関数はconstメンバ関数となる
	//この関数はオブジェクトの値を変更しない。

	//非公開メンバデータを取得する関数

	//-------------------------------------------------------------------------
	// タイトル取得関数
	// 引数：なし
	// 戻り値：タスクタイトル＜String型＞
	//-------------------------------------------------------------------------
	String GetTaskTitle() const;

	//-------------------------------------------------------------------------
	// タスク概要取得関数
	// 引数：なし
	// 戻り値：タスク概要＜String型＞
	//-------------------------------------------------------------------------
	String GetTaskDescription() const;

	//-------------------------------------------------------------------------
	// タスク優先度取得関数
	// 引数：なし
	// 戻り値：タスク優先度＜Priority型＞
	//-------------------------------------------------------------------------
	Priority GetTaskPriority() const;

	//-------------------------------------------------------------------------
	// タスク優先度取得関数
	// 引数：なし
	// 戻り値：タスク優先度＜int32型＞
	//-------------------------------------------------------------------------
	int32 GetTaskPriorityNum() const;

	//-------------------------------------------------------------------------
	// タスク優先度取得関数
	// 引数：なし
	// 戻り値：タスク優先度＜String型＞
	//-------------------------------------------------------------------------
	String GetTaskPriorityString() const;

	//-------------------------------------------------------------------------
	// タスク進捗状況取得関数
	// 引数：なし
	// 戻り値：タスク進捗状況＜Situation型＞
	//-------------------------------------------------------------------------
	Situation GetTaskSituation() const;

	//-------------------------------------------------------------------------
	// タスク進捗状況取得関数
	// 引数：なし
	// 戻り値：タスク進捗状況＜int32型＞
	//-------------------------------------------------------------------------
	int32 GetTaskSituationNum() const;

	//-------------------------------------------------------------------------
	// タスク進捗状況取得関数
	// 引数：なし
	// 戻り値：タスク進捗状況＜String型＞
	//-------------------------------------------------------------------------
	String GetTaskSituationString() const;

	//-------------------------------------------------------------------------
	// タスク作成日取得関数
	// 引数：なし
	// 戻り値：タスク作成日＜Date型＞
	//-------------------------------------------------------------------------
	Date GetTaskCreateDate() const;

	//-------------------------------------------------------------------------
	// タスク締切日取得関数
	// 引数：なし
	// 戻り値：タスク締切日＜Date型＞
	//-------------------------------------------------------------------------
	Date GetTaskDeadline() const;

	//-------------------------------------------------------------------------
	// タスク担当者取得関数
	// 引数：なし
	// 戻り値：タスク担当者＜String型＞
	//-------------------------------------------------------------------------
	String GetTaskManager() const;

	//メンバデータを書き換える関数

	//-------------------------------------------------------------------------
	// タスクタイトル設定関数
	// 引数：タスクタイトル＜String型＞
	// 戻り値：なし
	//-------------------------------------------------------------------------
	void SetTaskTitle(String title_);

	//-------------------------------------------------------------------------
	// タスク概要設定関数
	// 引数：タスク概要＜String型＞
	// 戻り値：なし
	//-------------------------------------------------------------------------
	void SetTaskDescription(String description_);

	//-------------------------------------------------------------------------
	// タスク優先度設定関数
	// 引数：タスク優先度＜Priority型＞
	// 戻り値：なし
	//-------------------------------------------------------------------------
	void SetTaskPriority(Priority priority_);

	//-------------------------------------------------------------------------
	// タスク進捗状況設定関数
	// 引数：タスク進捗状況＜Situation型＞
	// 戻り値：なし
	//-------------------------------------------------------------------------
	void SetTaskSituation(Situation situation_);

	//-------------------------------------------------------------------------
	// タスク作成日設定関数
	// 引数：タスク作成日＜Date型＞
	// 戻り値：なし
	//-------------------------------------------------------------------------
	void SetTaskCreateDate(Date createDate_);

	//-------------------------------------------------------------------------
	// タスク締切日設定関数
	// 引数：タスク締切日＜Date型＞
	// 戻り値：なし
	//-------------------------------------------------------------------------
	void SetTaskDeadline(Date deadline_);

	//-------------------------------------------------------------------------
	// タスク担当者設定関数
	// 引数：タスク担当者＜String型＞
	// 戻り値：なし
	//-------------------------------------------------------------------------
	void SetTaskManager(String manager_);


	//-------------------------------------------------------------------------
	//以下学習用欄

	//キャスト演算子
	//xをT型の変数に変換する
	//dynamic_cast<T>(x)	 //＜動的キャスト演算子＞基底クラスのポインタ参照を派生クラスのポインタ参照に変換する
	//static_cast<T>(x)      //＜静的キャスト演算子＞整数と浮動小数点数で変換する
	//reinterpret_cast<T>(x) //＜強制キャスト演算子＞整数とポインタ同士の変換を行う
	//const_cast<T>(x)       //＜定値性キャスト演算子＞定値性や揮発性の属性をつけたり外したりする

	//-------------------------------------------------------------------------
};
